
!!! cat | cat | ls //TODO -> doesnt behave like bash

input redir

< resources.txt // dont work, no error
< resources.txt | rev outfile.txt // dont work, no error.
< resources.txt | rev > outfile.txt // dont work, no error.
cat < resources.txt | rev > outfile.txt // work
< resources.txt cat | rev > outfile.txt // work 
< resources.txt | rev > outfile.txt // dont work, no error.
< resources.txt cat | > outfile.txt // dont work, no error.
< resources.txt cat rev > outfile.txt // dont work, error.
< resources.txt rev > outfile.txt // work
< resources.txt cat > outfile.txt // work
< resources.txt cat | > outfile.txt // dont work, no error.
cat < resources.txt > outfile.txt // work
rev < resources.txt > outfile.txt // work
cat < resources.txt | rev // work to stdout.
< resources.txt cat | rev

output redir

bash-3.2$ cat "hello" > outfile // dont work, error -> cat: hello: No such file or directory
bash-3.2$ echo "echho" > outfile // work
bash-3.2$ rev "rehhlo" >> outfile // dont work, error -> rev: rehhlo: No such file or directory
bash-3.2$ grep 'p' "HELLOp" >> outfile // dont work, error -> grep: HELLOp: No such file or directory
bash-3.2$ "HELLO" > outfile // dont work, error. -> bash: HELLO: command not found
bash-3.2$ > outfle echo "HELLO" // work

static void	exec_child_bonus(char *path, char **envp)
{
	pid_t	pid;
	int		pipe_fd[2];

	if (pipe(pipe_fd) < 0)
		message_error(ERR_PIPE, EXIT_FAILURE);
	pid = fork();
	if (pid == -1)
		message_error(ERR_FORK, EXIT_FAILURE);
	if (pid == 0)
	{
		close(pipe_fd[READ]);
		dup2(pipe_fd[WRITE], STDOUT_FILENO);
		exec_command(path, envp);
	}
	else
	{
		close(pipe_fd[WRITE]);
		dup2(pipe_fd[READ], STDIN_FILENO);
	}
}

void	exec_command(char *argv, char **envp)
{
	int		i;
	char	**cmds;
	char	*command;

	cmds = ft_split(argv, ' ');
	command = find_path(cmds[0], envp);
	if (command == NULL)
	{
		i = -1;
		while (cmds[++i])
			free(cmds[i]);
		free(cmds);
		message_error(ERR_CMD, 127);
	}
	if (execve(command, cmds, envp) == -1)
		message_error(ERR_EXEC, 127);
}

int	main(int argc, char **argv, char **envp)
{
	int		i;
	int		infile;
	int		outfile;

	if (argc < 5 || (argc < 6 && ft_strncmp(argv[1], "here_doc", 8) == 0)
		|| !envp[0])
		return (message(ERR_ARGS));
	i = 2;
	if (ft_strncmp(argv[1], "here_doc", 8) == 0)
	{
		i = 3;
		outfile = open_outfile(argv[argc - 1], 0);
		handle_here_doc(argv[2]);
	}
	else
	{
		infile = open_file(argv[1], 2);
		outfile = open_outfile(argv[argc - 1], 1);
		dup2(infile, STDIN_FILENO);
	}
	while (i < (argc - 2))
		exec_child_bonus(argv[i++], envp);
	dup2(outfile, STDOUT_FILENO);
	exec_command(argv[argc - 2], envp);
	exit(EXIT_SUCCESS);
}

void	ft_print_vars(t_base base)
{
	while (base.first_var)
	{
		ft_printf(1, "NAME: %s\nVALUE: %s\n",
			base.first_var->name, base.first_var->value);
		base.first_var = base.first_var->next;
	}
}

export:

a=1 => not in export or env
export a => puts a=1 in both
export b => puts b only in export
export c=2 => puts c=2 in both

fucked up prompt when ctrl+c in infinite loop cmd

void	update_last_cmd(t_base *base, t_cmd *cmd)
{
	int		i;
	t_var	*last_cmd;

	last_cmd = ft_findvar(base->first_var, "_");
	if (last_cmd != NULL)
	{
		free(last_cmd->value);
		last_cmd->value = ft_strdup(cmd->path);
	}
	i = -1;
	while (base->env[++i])
	{
		if (ft_strnstr(base->env[i], "_=", 2))
		{
			free(base->env[i]);
			base->env[i] = ft_strjoin("_=", cmd->path);
		}
	}
}

/*static void	creating_pipes(t_base *base)
{
	t_li_cmd	*cmds;
	int			fd[2];

	cmds = base->cmds;
	printf("DEBBUG10\n");
	while (cmds->next != NULL)
	{
		printf("DEBBUG11\n");
		if (pipe(fd) == -1)
			return ;
		printf("DEBBUG12\n");
		cmds->cmd->fd_out = fd[1];
		printf("DEBBUG13\n");
		//printf("name: %s and fd_in: %d\n", next_cmd->name, next_cmd->fd_in);
		cmds->next->cmd->fd_in = fd[0];
		cmds = cmds->next;
	}
	printf("DEBBUG16\n");
	closing_fd_if_redirections(base);
	printf("DEBBUG17\n");
}*/

/*static void	exec_child(t_base *base, t_token *token,
		int *fds, int in_fd)
{
	int		status;
	t_cmd	*curr_cmd;
	t_cmd	*next_cmd;

	close(fds[0]);
	curr_cmd = get_token_class(token);
	next_cmd = get_next_cmd(token->next);
	dup_redir(curr_cmd, next_cmd, fds, in_fd);
	if (is_child_builtin(curr_cmd) == 1)
	{
		if (exec_child_builtin(base, get_token_class(token)) == 0)
			exit(EXIT_SUCCESS);
		exit(EXIT_FAILURE);
	}
	status = check_permission(curr_cmd->path);
	if (status == 126 || status == 127)
	{
		base->exit_status = status;
		exit(status);
	}
	execve(curr_cmd->path, get_args_tab(curr_cmd->first_arg, curr_cmd->path),
		base->env);
	exit(EXIT_FAILURE);
}

static int	exec_parent(t_base *base, int pid, int *fds, int *std_pipe)
{
	close(fds[1]);
	waitpid(pid, &(base->exit_status), 0);
	base->exit_status = get_exit_status(base->exit_status);
	if (*std_pipe != 0)
		close(*std_pipe);
	*std_pipe = fds[0];
	return (0);
}

static int	handle_token(t_base *base, t_token *token,
		int *fds, int *std_pipe)
{
	pid_t	pid;

	signal(SIGINT, ft_ctrl_c2);
	signal(SIGQUIT, ft_ctrl_slash);
	if (is_parent_builtin(token) == 1)
	{
		if (exec_parent_builtin(base, get_token_class(token)) == 0)
		{
			base->exit_status = EXIT_SUCCESS;
			return (1);
		}
		return (-1);
	}
	pid = fork();
	if (pid == 0)
		exec_child(base, token, fds, *std_pipe);
	else
	{
		close_streams(get_token_class(token));
		exec_parent(base, pid, fds, std_pipe);
	}
	return (1);
}

int	exec_pipes(t_base *base)
{
	int		fd[2];
	t_token	*token;
	int		std_pipe;
	t_token	*tmp_token;

	std_pipe = 0;
	token = get_first_token_cmd_no_skip(base);
	tmp_token = token;
	while (token && is_token_cmd(token))
	{
		if (pipe(fd) < 0)
			return (-1);
		handle_token(base, token, fd, &std_pipe);
		token = get_next_token_cmd(token);
	}
	token = tmp_token;
	return (1);
}*/
